import google.appengine.ext.ndb as ndb


class BaseModel(ndb.Model):

    def __init__(self, *args, **kwargs):
        id = None
        if "id" in kwargs:
            id = kwargs["id"]
            del kwargs["id"]

        super(BaseModel, self).__init__(*args, **kwargs)

        if id is not None:
            self.id = id

    def _check_and_norm_id(self, id):
        raise NotImplementedError

    def _get_id(self):
        raise NotImplementedError

    @property
    def id(self):
        return self._get_id()

    @id.setter
    def id(self, id):
        if id is None:
            self.key = None
        else:
            id = self._check_and_norm_id(id)
            self.key = ndb.Key(self.__class__, id)


class ModelWithComputedId(BaseModel):
    """ It has a string id """

    def _check_and_norm_id(self, id):
        if not isinstance(id, unicode) and not isinstance(id, str):
            raise KeyError("{} is not a string".format(repr(id)))
        return unicode(id)

    def _get_id(self):
        return self.key.name if self.key is not None else None


class ModelWithAutogeneratedId(BaseModel):

    """ It has an integer id """
    def _check_and_norm_id(self, id):
        if not isinstance(id, long) and not isinstance(id, int):
            raise KeyError("{} is not a number".format(repr(id)))
        return long(id)

    def _get_id(self):
        return self.key.id if self.key is not None else None
